apiVersion: v1
kind: ServiceAccount
metadata:
  name: namespace-labeler
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: namespace-labeler
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: namespace-labeler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: namespace-labeler
subjects:
  - kind: ServiceAccount
    name: namespace-labeler
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: namespace-labeler
spec:
  template:
    metadata:
      name: namespace-labeler
    spec:
      serviceAccountName: namespace-labeler
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
        - name: main
          image: 10.10.167.44:8000/spectro-images-public/debug/spectro-util:1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -xc
            - |

              declare -a labels_arr=(
              "k8s.t-mobile.com/akmid=APM0103270"
              "k8s.t-mobile.com/director=RMcguir4"
              )

              declare -a spectro_namespaces_arr=(
              "cert-manager" "capi-kubeadm-bootstrap-system"
              "capi-kubeadm-control-plane-system" "capi-webhook-system"
              "kube-node-lease" "kube-public" "kube-system"
              "default" "test1" "tke-system" "dex" "vault" "reach-system")

              echo "$(date) Processing namespace label updates"

              #Sleep for 5 mins for all the addon namespaces to be processed
              echo "$(date) Sleep for 5m for all addon namespaces to be created"
              sleep 5m

              export KUBECONFIG=/etc/kubernetes/admin.conf

              #Find the special cluster namespace
              cluster_ns=$(kubectl get ns --output=custom-columns="Name:.metadata.name" --no-headers=true -l 'spectrocloud.com/cluster-name')
              echo "Cluster ns is ${cluster_ns}"

              #Add the cluster namespace to the existing array
              spectro_namespaces_arr+=($cluster_ns)

              echo "Namespaces to process : ${spectro_namespaces_arr[@]}"
              echo "Labels to process : ${labels_arr[@]}"

              for ns in "${spectro_namespaces_arr[@]}"
              do
                #Check if namespace exists
                kubectl get ns ${ns}
                if [[ $? -eq 0 ]]; then
                  for lbl in "${labels_arr[@]}"
                  do
                    echo "$(date) Updating label ${label} for ${ns}"
                    kubectl label namespace ${ns} ${lbl} --overwrite
                  done
                else
                  echo "Namespace ${ns} doesn't exist, skipping label updates"
                fi
              done

          volumeMounts:
            - mountPath: /etc/kubernetes/admin.conf
              name: k8s-config
              readOnly: true
      restartPolicy: OnFailure
      volumes:
        - name: k8s-config
          hostPath:
            path: /etc/kubernetes/admin.conf
---