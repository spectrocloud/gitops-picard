pack:
  namespace: "dex"
charts:
  dex:
    # Default values for dex.
    # This is a YAML-formatted file.
    # Declare variables to be passed into your templates.
    # -- Number of Pods to launch.
    replicaCount: 3
    image:
      # -- Repository to pull the container image from.
      repository: ghcr.io/dexidp/dex
      # -- Image [pull policy](https://kubernetes.io/docs/concepts/containers/images/#updating-images)
      pullPolicy: IfNotPresent
      # TODO(sagikazarmark): use a tagged version when available
      # -- Overrides the image tag (default is the chart appVersion).
      tag: ""
    # -- Image [pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret)
    imagePullSecrets: []
    # -- Provide a name in place of the chart name for `app:` labels.
    nameOverride: ""
    # -- Provide a name to substitute for the full names of resources.
    fullnameOverride: ""
    https:
      # -- Enable the HTTPS endpoint.
      enabled: false
    grpc:
      # -- Enable the gRPC endpoint.
      # Read more in the [documentation](https://dexidp.io/docs/api/).
      enabled: false
    # -- Application configuration.
    # See the [official documentation](https://dexidp.io/docs/).
    config:
      issuer: https://${issuer}
      storage:
        type: kubernetes
        config:
          inCluster: true
      logger:
        level: debug
      web:
        # port is taken from ports section above
        address: 0.0.0.0
        tlsCert: /etc/dex/tls/https/server/tls.crt
        tlsKey: /etc/dex/tls/https/server/tls.key
        allowedOrigins: []
      connectors:
      - type: ldap
        # Required field for connector id.
        id: ldap
        # Required field for connector name.
        name: LDAP (Okta-Dex)
        config:
          host: secldapwest.gsm1900.org:636
          insecureNoSSL: false
          insecureSkipVerify: true
          #rootCA: /etc/dex/ldap.ca
          bindDN: "$BINDDN"
          bindPW: "$BINDPW"
            # User search maps a username and password entered by a user to a LDAP entry.
          userSearch:
            # BaseDN to start the search from. It will translate to the query
            # "(&(objectClass=person)(uid=<username>))".
            baseDN: DC=gsm1900,DC=org
            # Optional filter to apply when searching the directory.
            filter: (&(objectClass=person)(|(samaccountname=svc_*)(samaccountname=rsc_*)(samaccountname=PAlhat2)(samaccountname=ADM_PAlhat2)(samaccountname=VAlla2)(samaccountname=ADM_VAlla2)(samaccountname=PAmbati1)(samaccountname=DAnapar1)(samaccountname=PAnguel)(samaccountname=ADM_PAnguel)(samaccountname=CA_PAnguel)(samaccountname=AArora24)(samaccountname=PAspill1)(samaccountname=ADM_PAspill1)(samaccountname=KBabu1)(samaccountname=ABachin)(samaccountname=ADM_ABachin)(samaccountname=CBachin)(samaccountname=NBachin1)(samaccountname=ABaik1)(samaccountname=ABandar1)(samaccountname=ABanush1)(samaccountname=KBarnab1)(samaccountname=JBarr46)(samaccountname=ABatra8)(samaccountname=SBejawa1)(samaccountname=RBetha1)(samaccountname=LBetu1)(samaccountname=ADM_LBetu1)(samaccountname=NBharad3)(samaccountname=ADM_NBharad3)(samaccountname=KBharam1)(samaccountname=ADM_KBharam1)(samaccountname=SBheemi2)(samaccountname=KBolli1)(samaccountname=KBrahmb3)(samaccountname=ADM_KBrahmb3)(samaccountname=DBrown246)(samaccountname=DBrown523)(samaccountname=NBrown139)(samaccountname=DBudati)(samaccountname=ECarman)(samaccountname=KChagan3)(samaccountname=RChakka3)(samaccountname=PChalam1)(samaccountname=ADM_PChalam1)(samaccountname=KChandr4)(samaccountname=ADM_KChandr4)(samaccountname=PChandr13)(samaccountname=ADM_PChandr13)(samaccountname=KChanin1)(samaccountname=RChapur1)(samaccountname=VChemur1)(samaccountname=ADM_VChemur1)(samaccountname=PCheruk1)(samaccountname=SChiang2)(samaccountname=KChinnp1)(samaccountname=SChinth7)(samaccountname=ADM_SChinth7)(samaccountname=AChodav1)(samaccountname=AChougu)(samaccountname=JChrist2)(samaccountname=GClamor1)(samaccountname=ADM_GClamor1)(samaccountname=GCreste1)(samaccountname=CDaddal1)(samaccountname=SEluri2)(samaccountname=HGupta2)(samaccountname=ARayabh2)(samaccountname=SKumar330)(samaccountname=KDakshi2)(samaccountname=VDaroor1)(samaccountname=PDas29)(samaccountname=SDash19)(samaccountname=ADavulu)(samaccountname=ADM_ADavulu)(samaccountname=T2_ADavulu)(samaccountname=ADesai17)(samaccountname=SDesai15)(samaccountname=ADM_SDesai15)(samaccountname=ADeshpa12)(samaccountname=ADM_ADeshpa12)(samaccountname=JDighe3)(samaccountname=ADM_JDighe3)(samaccountname=SDiyyal1)(samaccountname=ADM_SDiyyal1)(samaccountname=GDuan1)(samaccountname=MEdhi1)(samaccountname=ADM_MEdhi1)(samaccountname=CEnninf2)(samaccountname=ADM_CEnninf2)(samaccountname=SErnst3)(samaccountname=ADM_SErnst3)(samaccountname=FFlores64)(samaccountname=ADM_FFlores64)(samaccountname=FFlores78)(samaccountname=dss22129)(samaccountname=FFlores87)(samaccountname=SGopalr1)(samaccountname=SGujjar2)(samaccountname=ADM_SGujjar2)(samaccountname=T2_SGujjar2)(samaccountname=DGalili1)(samaccountname=ADM_DGalili1)(samaccountname=SReddy47)(samaccountname=BGangir)(samaccountname=ADM_BGangir)(samaccountname=DGanji2)(samaccountname=ADM_DGanji2)(samaccountname=NGarcia143)(samaccountname=GGinjup1)(samaccountname=VGontla1)(samaccountname=GGoslen1)(samaccountname=ADM_GGoslen1)(samaccountname=MGottam1)(samaccountname=AGowda2)(samaccountname=ZGrauer1)(samaccountname=AGujja1)(samaccountname=AGundum1)(samaccountname=AGupta85)(samaccountname=AGupta266)(samaccountname=SGupta81)(samaccountname=ADM_SGupta81)(samaccountname=SGurusa1)(samaccountname=NGuthi1)(samaccountname=SGuvval4)(samaccountname=ADM_SGuvval4)(samaccountname=CA_SGuvval4)(samaccountname=LHabib1)(samaccountname=ADM_LHabib1)(samaccountname=AHarikr3)(samaccountname=NHarwoo4)(samaccountname=NHarwoo2)(samaccountname=ADM_NHarwoo2)(samaccountname=JHillia2)(samaccountname=ADM_JHillia2)(samaccountname=PHoang8)(samaccountname=ADM_PHoang8)(samaccountname=RHuber1)(samaccountname=KIlavar1)(samaccountname=RJagade2)(samaccountname=ADM_RJagade2)(samaccountname=SJain79)(samaccountname=ADM_SJain79)(samaccountname=SJain92)(samaccountname=DJampan2)(samaccountname=DJayaku1)(samaccountname=AJena3)(samaccountname=JGeorge40)(samaccountname=TJose3)(samaccountname=ADM_TJose3)(samaccountname=SJosyul3)(samaccountname=RJupudi2)(samaccountname=ADM_RJupudi2)(samaccountname=VJuthug1)(samaccountname=ADM_VJuthug1)(samaccountname=CKrishn1)(samaccountname=ADM_CKrishn1)(samaccountname=SKabbi)(samaccountname=ADM_SKabbi)(samaccountname=NKakuma2)(samaccountname=ADM_NKakuma2)(samaccountname=KKamdi2)(samaccountname=ADM_KKamdi2)(samaccountname=SKamise)(samaccountname=VKancha3)(samaccountname=ADM_VKancha3)(samaccountname=TKandas1)(samaccountname=BKandep1)(samaccountname=ADM_BKandep1)(samaccountname=RKankan1)(samaccountname=VKantar1)(samaccountname=GKapoor)(samaccountname=GKapoor4)(samaccountname=SKarupp2)(samaccountname=ADM_SKarupp2)(samaccountname=AKatiya2)(samaccountname=PKay)(samaccountname=ADM_PKay)(samaccountname=SKeesar3)(samaccountname=IKent1)(samaccountname=ADM_IKent1)(samaccountname=AKhan203)(samaccountname=ADM_AKhan203)(samaccountname=CA_AKhan203)(samaccountname=NKlemen1)(samaccountname=ADM_NKlemen1)(samaccountname=SKonda1)(samaccountname=UKopana)(samaccountname=ADM_UKopana)(samaccountname=VKoppus4)(samaccountname=VKrishn38)(samaccountname=SKruthi2)(samaccountname=KKuchar1)(samaccountname=SKukkad1)(samaccountname=ADM_SKukkad1)(samaccountname=VKuland1)(samaccountname=GKumar29)(samaccountname=GKumar34)(samaccountname=GKumar37)(samaccountname=GKumar38)(samaccountname=NKumbha)(samaccountname=ADM_NKumbha)(samaccountname=AKyriko1)(samaccountname=ADM_AKyriko1)(samaccountname=ALeeks2)(samaccountname=ELeuenb1)(samaccountname=ADM_ELeuenb1)(samaccountname=CA_ELeuenb1)(samaccountname=MLin6)(samaccountname=ADM_MLin6)(samaccountname=SLingap)(samaccountname=KLokasa)(samaccountname=JLupo)(samaccountname=AMannur1)(samaccountname=KMachir1)(samaccountname=ADM_KMachir1)(samaccountname=SMaddin2)(samaccountname=PMaddin1)(samaccountname=VMadipa1)(samaccountname=KMahesh5)(samaccountname=AMahule2)(samaccountname=PMallav1)(samaccountname=PMalled1)(samaccountname=SMallic4)(samaccountname=ADM_SMallic4)(samaccountname=RMancha2)(samaccountname=SMannep4)(samaccountname=ADM_SMannep4)(samaccountname=VMarell1)(samaccountname=ADM_VMarell1)(samaccountname=NPinkst)(samaccountname=ADM_NPinkst)(samaccountname=NMartin111)(samaccountname=ADM_NMartin111)(samaccountname=JMathai2)(samaccountname=ADM_JMathai2)(samaccountname=NMathur5)(samaccountname=MMaurya1)(samaccountname=ADM_MMaurya1)(samaccountname=CA_MMaurya1)(samaccountname=KMckeet1)(samaccountname=AMehrot6)(samaccountname=ADM_AMehrot6)(samaccountname=CMiller21)(samaccountname=CMiller140)(samaccountname=CMiller175)(samaccountname=AMohamm101)(samaccountname=ADM_AMohamm101)(samaccountname=SMohan11)(samaccountname=SMohant29)(samaccountname=YMonroy2)(samaccountname=AMudack1)(samaccountname=TMuddan1)(samaccountname=SMudire1)(samaccountname=VMuthuk1)(samaccountname=CNacham1)(samaccountname=SNagara21)(samaccountname=ADM_SNagara21)(samaccountname=CNagire1)(samaccountname=ADM_CNagire1)(samaccountname=SNalla5)(samaccountname=ADM_SNalla5)(samaccountname=PNandya1)(samaccountname=VNannap1)(samaccountname=RNaraya8)(samaccountname=SNatara4)(samaccountname=GNavarr32)(samaccountname=ADM_GNavarr32)(samaccountname=VNeduru1)(samaccountname=ADM_VNeduru1)(samaccountname=VNekkal2)(samaccountname=ANekkan)(samaccountname=SNemani2)(samaccountname=ADM_SNemani2)(samaccountname=JO1)(samaccountname=SPandia4)(samaccountname=SPeermo1)(samaccountname=VPalani1)(samaccountname=ADM_VPalani1)(samaccountname=APalle)(samaccountname=HPanesa1)(samaccountname=SParasa1)(samaccountname=HPartha1)(samaccountname=ADM_HPartha1)(samaccountname=PPatida)(samaccountname=BPeddir1)(samaccountname=ADM_BPeddir1)(samaccountname=TPeesar1)(samaccountname=APerry57)(samaccountname=ADM_APerry57)(samaccountname=LPeters69)(samaccountname=SPidaka1)(samaccountname=SSandak)(samaccountname=RPiridi1)(samaccountname=CPoojar5)(samaccountname=ADM_CPoojar5)(samaccountname=CA_CPoojar5)(samaccountname=MPoslus1)(samaccountname=ADM_MPoslus1)(samaccountname=EPradee1)(samaccountname=VChinth3)(samaccountname=APrasan1)(samaccountname=GPulaga2)(samaccountname=HRaavi1)(samaccountname=ADM_HRaavi1)(samaccountname=MRahat1)(samaccountname=MRahat2)(samaccountname=SRajesh5)(samaccountname=ADM_SRajesh5)(samaccountname=JRamakr1)(samaccountname=ADM_JRamakr1)(samaccountname=MRamakr1)(samaccountname=SRamakr5)(samaccountname=ADM_SRamakr5)(samaccountname=RMonted)(samaccountname=RRamos177)(samaccountname=RRamos218)(samaccountname=VRavich2)(samaccountname=BRavupa1)(samaccountname=ADM_BRavupa1)(samaccountname=SRavuri3)(samaccountname=NReddy33)(samaccountname=YRodda1)(samaccountname=SSakthi2)(samaccountname=ADM_SSakthi2)(samaccountname=PSadabo1)(samaccountname=SSahoo16)(samaccountname=LSamuel9)(samaccountname=PSantha2)(samaccountname=ADM_PSantha2)(samaccountname=RSawale1)(samaccountname=ADM_RSawale1)(samaccountname=PSeeram1)(samaccountname=RSerna5)(samaccountname=ADM_RSerna5)(samaccountname=PShah27)(samaccountname=ADM_PShah27)(samaccountname=HShaik4)(samaccountname=ADM_HShaik4)(samaccountname=SShaik10)(samaccountname=MShanmu)(samaccountname=PSharma85)(samaccountname=PSharma136)(samaccountname=PSharma139)(samaccountname=PSharma143)(samaccountname=PSharma146)(samaccountname=KSharma17)(samaccountname=KSharma53)(samaccountname=KShinde1)(samaccountname=ADM_KShinde1)(samaccountname=CShivar1)(samaccountname=HSingh107)(samaccountname=HSingh135)(samaccountname=RSingh96)(samaccountname=RSingh116)(samaccountname=RSingh193)(samaccountname=RSingh240)(samaccountname=RSingh252)(samaccountname=RSingh254)(samaccountname=RSingh92)(samaccountname=ADM_RSingh92)(samaccountname=VSingh35)(samaccountname=JSinha7)(samaccountname=SSirici1)(samaccountname=ADM_SSirici1)(samaccountname=CSrivas1)(samaccountname=MSrivas12)(samaccountname=GSuresh)(samaccountname=ADM_GSuresh)(samaccountname=TTacket1)(samaccountname=AThadeu1)(samaccountname=TThatik1)(samaccountname=JThomas22)(samaccountname=JThomas12)(samaccountname=JThomas299)(samaccountname=ADM_JThomas12)(samaccountname=CA_JThomas12)(samaccountname=hnf88956)(samaccountname=NThomps34)(samaccountname=ADM_NThomps34)(samaccountname=SThomso1)(samaccountname=ADM_SThomso1)(samaccountname=SThyaga3)(samaccountname=XTian1)(samaccountname=ATisson1)(samaccountname=CA_ATisson1)(samaccountname=ADM_ATisson1)(samaccountname=STummal3)(samaccountname=ADM_STummal3)(samaccountname=ITuteja1)(samaccountname=SVajral2)(samaccountname=ADM_SVajral2)(samaccountname=NVarghe1)(samaccountname=SVadla1)(samaccountname=ADM_SVadla1)(samaccountname=VVadlam)(samaccountname=RVakala1)(samaccountname=CA_RVakala1)(samaccountname=KVanama3)(samaccountname=VVasant3)(samaccountname=AVasude1)(samaccountname=ADM_AVasude1)(samaccountname=SVempat1)(samaccountname=AVemula4)(samaccountname=T2_AVemula4)(samaccountname=NSampat)(samaccountname=ADM_NSampat)(samaccountname=RVerma19)(samaccountname=ADM_RVerma19)(samaccountname=DVijaya2)(samaccountname=SVishwa6)(samaccountname=CVishwe)(samaccountname=MVuchhu1)(samaccountname=ADM_MVuchhu1)(samaccountname=CA_MVuchhu1)(samaccountname=SWarad1)(samaccountname=ADM_SWarad1)(samaccountname=YYaaran1)(samaccountname=RYadav38)(samaccountname=SYannam)(samaccountname=NYelma1)(samaccountname=SYendur1)(samaccountname=ADM_SYendur1)(samaccountname=SZhabin1)(samaccountname=ADM_SZhabin1)(samaccountname=MKumar57)(samaccountname=MKumar76)(samaccountname=MKumar90)(samaccountname=ADM_MKumar76)(samaccountname=MKumar106)(samaccountname=MKumar117)(samaccountname=MKumar130)(samaccountname=MKumar147)(samaccountname=MKumar156)(samaccountname=MKumar164)(samaccountname=ADM_MKumar164)(samaccountname=RSirka3)(samaccountname=ADM_RSirka3)))
            # username attribute used for comparing user entries. This will be translated
            # and combined with the other filter as "(<attr>=<username>)".
            username: sAMAccountName
            # The following three fields are direct mappings of attributes on the user entry.
            # String representation of the user.
            idAttr: DN
            # Required. Attribute to map to Email.
            emailAttr: mail
            # Maps to display name of users. No default value.
            nameAttr: sAMAccountName
          # Group search queries for groups given a user entry.
          groupSearch:
            # BaseDN to start the search from. It will translate to the query
            # "(&(objectClass=group)(member=<user uid>))".
            baseDN: ou=groups,ou=user accounts,dc=gsm1900,dc=org
            # Optional filter to apply when searching the directory.
            filter: (objectClass=group)

            # Following list contains field pairs that are used to match a user to a group. It adds an additional
            # requirement to the filter that an attribute in the group must match the user's
            # attribute value.
            userMatchers:
            - groupAttr: member
              userAttr: DN
            # Represents group name.
            nameAttr: cn
      oauth2:
        alwaysShowLoginScreen: true
        skipApprovalScreen: true
        passwordConnector: ldap
        responseTypes:
          - "code"
          - "id_token"
          - "token"
      staticClients:
      - id: spectrocloud
        name: 'Spectro Cloud'
        public: true
        redirectURIs:
        - http://127.0.0.1:5555/callback
        - http://localhost:8000
        - http://localhost:18000
        - urn:ietf:wg:oauth:2.0:oob
      enablePasswordDB: false
    # -- Additional storage [volumes](https://kubernetes.io/docs/concepts/storage/volumes/) of a Pod.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/pod-v1/#volumes) for details.
    # volumes: []
    # -- Additional [volume mounts](https://kubernetes.io/docs/tasks/configure-pod-container/configure-volume-storage/) of a container.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/#volumes) for details.
    volumeMounts: []
    # -- Configure a [Secret](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables) or a [ConfigMap](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables) as environment variable sources for a Pod.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/#environment-variables) for details.
    envFrom: []
    # -- Pass environment variables directly to a Pod.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/#environment-variables) for details.
    env:
      KUBERNETES_POD_NAMESPACE: dex
    #
    serviceAccount:
      # -- Whether a service account should be created.
      create: true
      # -- Annotations to add to the service account.
      annotations: {}
      # -- The name of the service account to use.
      # If not set and create is true, a name is generated using the fullname template.
      name: ""
    rbac:
      # -- Specifies whether RBAC resources should be created.
      # If disabled, the operator is responsible for creating the necessary resources based on the templates.
      create: true
    # -- Custom annotations for a Pod.
    podAnnotations:
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-pre-populate-only: "true"
      vault.hashicorp.com/agent-configmap: vaultconfig
      vault.hashicorp.com/agent-extra-secret: ldap-secret
    # -- Pod [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/pod-v1/#security-context) for details.
    podSecurityContext: {}
      # fsGroup: 2000
    # -- Container [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/#security-context) for details.
    securityContext: {}
      # capabilities:
      #   drop:
      #   - ALL
      # readOnlyRootFilesystem: true
      # runAsNonRoot: true
      # runAsUser: 1000
    service:
      # -- Annotations to add to the Service.
      annotations: {}
      # -- Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
      type: ClusterIP
      ports:
        http:
          # -- HTTP service port
          port: 5556
          # -- (int) HTTP node port (when applicable)
          nodePort:
        grpc:
          # -- gRPC service port
          port: 5557
          # -- (int) gRPC node port (when applicable)
          nodePort:
    # -- Ingress configuration (see [values.yaml](values.yaml) for details).
    # @default -- Disabled by default.
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: std-ingress-class
        # kubernetes.io/tls-acme: "true"
      hosts:
        - host: ${issuer}
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - hosts:
            - ${issuer}
    # -- Container resource [requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/#resources) for details.
    # @default -- No requests or limits.
    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
    # -- Autoscaling configuration (see [values.yaml](values.yaml) for details).
    # @default -- Disabled by default.
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    # -- [Node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) configuration.
    nodeSelector: {}
    # -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) for node taints.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/pod-v1/#scheduling) for details.
    tolerations: []
    # -- [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) configuration.
    # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/pod-v1/#scheduling) for details.
    affinity: {}
    # -- [InitContainers](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/) for the Pod.
    initContainers:
      - name: init-wait-for-vault
        image: gcr.io/spectro-images-public/debug/spectro-util:1.0.0
        command:
        - /bin/bash
        - -xc
        - |
          #!/bin/bash
          # Vault leaves agent-inject-status=injected annotation in the Dex pod when vault agent has successfully injected the secrets
          # Wait ( & restart Dex pod ) until the annotation is set
          cat /etc/podinfo/annotations
          grep 'agent-inject-status="injected"' /etc/podinfo/annotations -q
          if [[ "$?" != 0 ]] ; then
            echo "Vault agent injection not finished. Sleep 10 seconds and retry by deleting pod '$pod_name' !";
            sleep 10;
            kubectl delete pod -n $(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace) $pod_name
          else
            echo "Vault agent injection status verified, init finished !"
          fi
        volumeMounts:
        - name: podinfo
          mountPath: /etc/podinfo
        env:
        - name: pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
    useVaultIntegration: true
    volumes:
      - name: podinfo
        downwardAPI:
          items:
            - path: "annotations"
              fieldRef:
                fieldPath: metadata.annotations
